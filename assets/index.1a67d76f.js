import{d as g,r as f,c as _,a,b as d,w as u,e as k,v as Z,F as w,f as ee,o as c,g as h,t as i,T as te,h as $,i as ne,j as oe,k as ae,n as T,p as P,l as A,u as L,m as C,q as re,s as E,x as ie,y as N,z as B,A as se,B as le,C as ue,D as ce,E as S,G as me,H as de,I as pe,J as _e,P as fe,K as he,L as ge}from"./vendor.8c82997f.js";const ve=function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const l of o)if(l.type==="childList")for(const s of l.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&r(s)}).observe(document,{childList:!0,subtree:!0});function t(o){const l={};return o.integrity&&(l.integrity=o.integrity),o.referrerpolicy&&(l.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?l.credentials="include":o.crossorigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function r(o){if(o.ep)return;o.ep=!0;const l=t(o);fetch(o.href,l)}};ve();var I="/assets/logo.66f84b13.jpeg";function M(n){n.__i18n=n.__i18n||[],n.__i18n.push({locale:"",resource:{en:{routes:{home:e=>{const{normalize:t}=e;return t(["Home"])},extractor:e=>{const{normalize:t}=e;return t(["Extractor"])},contact:e=>{const{normalize:t}=e;return t(["Contact"])},about:e=>{const{normalize:t}=e;return t(["About Us"])}}},pt:{routes:{home:e=>{const{normalize:t}=e;return t(["In\xEDcio"])},extractor:e=>{const{normalize:t}=e;return t(["Extrator"])},contact:e=>{const{normalize:t}=e;return t(["Contato"])},about:e=>{const{normalize:t}=e;return t(["Quem Somos"])}}}}})}var v=(n,e)=>{const t=n.__vccOpts||n;for(const[r,o]of e)t[r]=o;return t};const F=g({data(){return{langs:["en","pt"]}}}),ze={class:"locale-changer"},$e=["value"];function be(n,e,t,r,o,l){const s=f("router-link");return c(),_("header",null,[a("img",{onClick:e[0]||(e[0]=p=>n.$router.push({name:"Home"})),alt:"MackPrevIA logo small",src:I}),a("ul",null,[a("li",null,[d(s,{"active-class":"selected",to:"/"},{default:u(()=>[h(i(n.$t("routes.home")),1)]),_:1})]),a("li",null,[d(s,{"active-class":"selected",to:"/extractor"},{default:u(()=>[h(i(n.$t("routes.extractor")),1)]),_:1})]),a("li",null,[d(s,{"active-class":"selected",to:"/contact"},{default:u(()=>[h(i(n.$t("routes.contact")),1)]),_:1})]),a("li",null,[d(s,{"active-class":"selected",to:"/about"},{default:u(()=>[h(i(n.$t("routes.about")),1)]),_:1})])]),a("div",ze,[k(a("select",{"onUpdate:modelValue":e[1]||(e[1]=p=>n.$root.$i18n.locale=p)},[(c(!0),_(w,null,ee(n.langs,(p,m)=>(c(),_("option",{key:`Lang${m}`,value:p.toLowerCase()},i(p),9,$e))),128))],512),[[Z,n.$root.$i18n.locale]])])])}typeof M=="function"&&M(F);var ye=v(F,[["render",be],["__scopeId","data-v-84db5d9e"]]);function O(n){n.__i18n=n.__i18n||[],n.__i18n.push({locale:"",resource:{en:{footer:{rights:e=>{const{normalize:t}=e;return t(["All rights reserved"])}}},pt:{footer:{rights:e=>{const{normalize:t}=e;return t(["Todos os direitos reservados"])}}}}})}const x=g({});function ke(n,e,t,r,o,l){return c(),_("footer",null,[a("ul",null,[a("li",null," MackPrevIA - "+i(n.$t("footer.rights")),1)])])}typeof O=="function"&&O(x);var Te=v(x,[["render",ke],["__scopeId","data-v-f1d72016"]]);const Ee=g({components:{TheFooter:Te,TheHeader:ye}});function Ie(n,e,t,r,o,l){const s=f("the-header"),p=f("router-view"),m=f("the-footer");return c(),_(w,null,[d(s),d(p,null,{default:u(({Component:Y})=>[d(te,{name:"bounce"},{default:u(()=>[(c(),$(ne(Y)))]),_:2},1024)]),_:1}),d(m)],64)}var Ce=v(Ee,[["render",Ie]]);const Ne=Symbol(),Se=oe({state(){return{activeTab:"home"}},getters:{activeTab(n,e){return e.activeTab}},mutations:{tabMutation(n,e){n.activeTab=e}},actions:{changeTab(n,e){n.commit("tabMutation",e)}}});const we=g({props:{color:{type:String,required:!1,default:"secondary"}},computed:{theme(){switch(this.color){case"primary":return{primary:!0};case"secondary":return{secondary:!0};default:return{secondary:!0}}}}});function Pe(n,e,t,r,o,l){return c(),_("button",{class:T(n.theme)},[ae(n.$slots,"default",{},void 0,!0)],2)}var b=v(we,[["render",Pe],["__scopeId","data-v-5f1a37ec"]]);function H(n){n.__i18n=n.__i18n||[],n.__i18n.push({locale:"",resource:{en:{title:e=>{const{normalize:t}=e;return t(["Page not found"])},paragraph:e=>{const{normalize:t}=e;return t(["Click on the button bellow to go back to the home page"])},buttonText:e=>{const{normalize:t}=e;return t(["Home"])}},pt:{title:e=>{const{normalize:t}=e;return t(["P\xE1gina n\xE3o encontrada"])},paragraph:e=>{const{normalize:t}=e;return t(["Clique no bot\xE3o abaixo para retornar a tela inicial"])},buttonText:e=>{const{normalize:t}=e;return t(["In\xEDcio"])}}}})}const V=g({components:{TheButton:b},methods:{onClick(){this.$router.push({name:"Home"})}}}),q=n=>(P("data-v-d87f7122"),n=n(),A(),n),Ae=q(()=>a("img",{alt:"MackPrevIA logo",src:I},null,-1)),Le=q(()=>a("br",null,null,-1));function Be(n,e,t,r,o,l){const s=f("the-button");return c(),_("section",null,[Ae,a("h1",null,i(n.$t("title")),1),a("p",null,[Le,h(" "+i(n.$t("paragraph")),1)]),d(s,{color:"secondary",onClick:n.onClick},{default:u(()=>[h(i(n.$t("buttonText")),1)]),_:1},8,["onClick"])])}typeof H=="function"&&H(V);var Me=v(V,[["render",Be],["__scopeId","data-v-d87f7122"]]);function D(n){n.__i18n=n.__i18n||[],n.__i18n.push({locale:"",resource:{en:{title:e=>{const{normalize:t}=e;return t(["Under construction \u{1F6A7} \u{1F6D1}"])},paragraph:e=>{const{normalize:t}=e;return t(["MackPrevIA has as its object of study the scientific phenomenon called Artificial Intelligence and its imbrications with the legal sciences, in particular with regard to its application as an instrument to improve the effectiveness of social security law, as well as the identification of more legal principles and categories. adequate to guide its regulation, which does not yet exist in Brazil."])},buttonText:e=>{const{normalize:t}=e;return t(["Learn More"])}},pt:{title:e=>{const{normalize:t}=e;return t(["Em constru\xE7\xE3o \u{1F6A7} \u{1F6D1}"])},paragraph:e=>{const{normalize:t}=e;return t(["O MackPrevIA tem como objeto de estudos o fen\xF4meno cient\xEDfico denominado Intelig\xEAncia Artificial e suas imbrica\xE7\xF5es com as ci\xEAncias jur\xEDdicas, em especial no que diz respeito \xE0 sua aplica\xE7\xE3o como instrumento para melhoria da efetividade do direito previdenci\xE1rio, bem como a identifica\xE7\xE3o dos princ\xEDpios e categorias jur\xEDdicas mais adequados a orientar sua regulamenta\xE7\xE3o, ainda inexistente no Brasil."])},buttonText:e=>{const{normalize:t}=e;return t(["Saber mais"])}}}})}const U=g({components:{TheButton:b},methods:{redirectExtractor(){this.$store.dispatch("changeTab","extractor"),this.$router.push({name:"Extractor"})}}}),Fe=n=>(P("data-v-306227bd"),n=n(),A(),n),Oe=Fe(()=>a("img",{alt:"MackPrevIA logo",src:I},null,-1)),xe={id:"paragraph"};function He(n,e,t,r,o,l){const s=f("the-button");return c(),_("section",null,[Oe,a("div",xe,[a("h1",null,i(n.$t("title")),1),a("p",null,i(n.$t("paragraph")),1),d(s,{onClick:n.redirectExtractor,color:"secondary"},{default:u(()=>[h(i(n.$t("buttonText")),1)]),_:1},8,["onClick"])])])}typeof D=="function"&&D(U);var Ve=v(U,[["render",He],["__scopeId","data-v-306227bd"]]);function j(n){n.__i18n=n.__i18n||[],n.__i18n.push({locale:"",resource:{en:{title:e=>{const{normalize:t}=e;return t(["Under construction \u{1F6A7} \u{1F6D1}"])}},pt:{title:e=>{const{normalize:t}=e;return t(["Em constru\xE7\xE3o \u{1F6A7} \u{1F6D1}"])}}}})}const K=g({}),qe=a("img",{alt:"MackPrevIA logo",src:I},null,-1);function De(n,e,t,r,o,l){return c(),_("section",null,[qe,a("h1",null,i(n.$t("title")),1)])}typeof j=="function"&&j(K);var Ue=v(K,[["render",De]]);function R(n){n.__i18n=n.__i18n||[],n.__i18n.push({locale:"",resource:{en:{title:e=>{const{normalize:t}=e;return t(["CNIS Extractor"])},paragraph:e=>{const{normalize:t}=e;return t(["To extract the data from your CNIS, just select the PDF with the data and send it for analysis. No data is saved during analysis."])},selectButton:e=>{const{normalize:t}=e;return t(["Select your CNIS"])},submitButton:e=>{const{normalize:t}=e;return t(["Send"])},selectParagraph:e=>{const{normalize:t,interpolate:r,named:o}=e;return t(["File ",r(o("fileName"))," with extension ",r(o("fileExtension"))," was selected"])},toastError:e=>{const{normalize:t}=e;return t(["Failed to send the file"])},toastSuccess:e=>{const{normalize:t}=e;return t(["File sent successfully"])}},pt:{title:e=>{const{normalize:t}=e;return t(["Extrator CNIS"])},paragraph:e=>{const{normalize:t}=e;return t(["Para extrair os dados do seu CNIS, basta selecionar o PDF com os dados e enviar para an\xE1lise. Nenhum dado \xE9 salvo durante a an\xE1lise."])},selectButton:e=>{const{normalize:t}=e;return t(["Selecione o seu CNIS"])},submitButton:e=>{const{normalize:t}=e;return t(["Enviar"])},selectParagraph:e=>{const{normalize:t,interpolate:r,named:o}=e;return t(["Arquivo ",r(o("fileName"))," com a extens\xE3o ",r(o("fileExtension"))," selecionado"])},toastError:e=>{const{normalize:t}=e;return t(["Falha ao enviar o arquivo"])},toastSuccess:e=>{const{normalize:t}=e;return t(["Arquivo enviado com sucesso"])}}}})}const Q=g({setup(){return{toast:L()}},components:{TheButton:b,Translation:C},data(){return{file:{type:File},fileName:"",fileExtension:""}},methods:{async sendFile(){let n=new FormData;n.append("file",this.file);try{if((await re.post("http://localhost:3000/upload",{body:n,headers:{"Content-Type":"multipart/form-data"}})).status>299){this.toast.error(this.$t("toastError"));return}this.toast.success(this.$t("toastSuccess"))}catch{this.toast.error(this.$t("toastError"))}},getFile(n){this.file=n.target.files[0];const e=n.target.files[0].name.split(".");this.fileName=e[0],this.fileExtension=e[1],this.fileName.length>25&&(this.fileName=e[0].substring(0,25)+"...")},triggerClick(){this.$refs.file.click()}}});function je(n,e,t,r,o,l){const s=f("the-button"),p=f("translation");return c(),_("section",null,[a("h1",null,i(n.$t("title")),1),a("p",null,i(n.$t("paragraph")),1),a("div",null,[d(s,{color:"secondary",class:"file-input",onClick:n.triggerClick},{default:u(()=>[h(i(n.$t("selectButton"))+" ",1),a("input",{accept:".pdf",type:"file",name:"file",ref:"file",onChange:e[0]||(e[0]=(...m)=>n.getFile&&n.getFile(...m))},null,544)]),_:1},8,["onClick"]),d(s,{color:"primary",onClick:n.sendFile},{default:u(()=>[h(i(n.$t("submitButton")),1)]),_:1},8,["onClick"])]),n.fileName!==""?(c(),$(p,{key:0,class:"file-message",keypath:"selectParagraph",tag:"p"},{fileName:u(()=>[a("strong",null,i(n.fileName),1)]),fileExtension:u(()=>[a("strong",null,i(n.fileExtension),1)]),_:1})):E("",!0)])}typeof R=="function"&&R(Q);var Ke=v(Q,[["render",je],["__scopeId","data-v-fe06292e"]]);function W(n){n.__i18n=n.__i18n||[],n.__i18n.push({locale:"",resource:{en:{title:e=>{const{normalize:t}=e;return t(["Contact Us!"])},legend:e=>{const{normalize:t}=e;return t(["Contact"])},labels:{email:e=>{const{normalize:t}=e;return t(["Email"])},name:e=>{const{normalize:t}=e;return t(["Name"])},message:e=>{const{normalize:t}=e;return t(["Message"])}},errors:{email:e=>{const{normalize:t,interpolate:r,named:o}=e;return t(["Email ",r(o("email"))," is invalid"])},name:e=>{const{normalize:t,interpolate:r,named:o}=e;return t(["Name ",r(o("name"))," is invalid"])},message:e=>{const{normalize:t,interpolate:r,named:o}=e;return t(["Message ",r(o("message"))," is invalid"])}},submitButton:e=>{const{normalize:t}=e;return t(["Submit"])},toastError:e=>{const{normalize:t}=e;return t(["Invalid data"])}},pt:{title:e=>{const{normalize:t}=e;return t(["Contate-nos"])},legend:e=>{const{normalize:t}=e;return t(["Contato"])},labels:{email:e=>{const{normalize:t}=e;return t(["Email"])},name:e=>{const{normalize:t}=e;return t(["Nome"])},message:e=>{const{normalize:t}=e;return t(["Mensagem"])}},errors:{email:e=>{const{normalize:t,interpolate:r,named:o}=e;return t(["Email ",r(o("email"))," \xE9 inv\xE1lido"])},name:e=>{const{normalize:t,interpolate:r,named:o}=e;return t(["Name ",r(o("name"))," \xE9 inv\xE1lido"])},message:e=>{const{normalize:t,interpolate:r,named:o}=e;return t(["Message ",r(o("message"))," \xE9 inv\xE1lido"])}},submitButton:e=>{const{normalize:t}=e;return t(["Enviar"])},toastError:e=>{const{normalize:t}=e;return t(["Dados inv\xE1lidos"])}}}})}const G=g({components:{TheButton:b,Translation:C},setup:()=>({v$:ie(),toast:L()}),data(){return{name:"",email:"",message:""}},methods:{async handleSubmit(){if(!await this.v$.$validate()){this.toast.error(this.$t("toastError"));return}}},validations(){return{name:{required:N,minLengthValue:B(4)},email:{required:N,email:se},message:{required:N,minLengthValue:B(4),maxLength:le(150)}}},validationConfig:{$autoDirty:!0}}),Re={for:"email"},Qe={for:"name"},We={for:"Message"};function Ge(n,e,t,r,o,l){const s=f("translation"),p=f("the-button");return c(),_("section",null,[a("h1",null,i(n.$t("title")),1),a("fieldset",null,[a("legend",null,i(n.$t("legend")),1),a("form",{onSubmit:e[3]||(e[3]=ue((...m)=>n.handleSubmit&&n.handleSubmit(...m),["prevent"])),onKeyup:e[4]||(e[4]=ce((...m)=>n.handleSubmit&&n.handleSubmit(...m),["enter"]))},[a("label",Re,i(n.$t("labels.email")),1),k(a("input",{class:T({invalid:n.v$.email.$error}),id:"email",type:"email","onUpdate:modelValue":e[0]||(e[0]=m=>n.email=m),placeholder:"email"},null,2),[[S,n.email,void 0,{trim:!0}]]),n.v$.email.$error?(c(),$(s,{key:0,keypath:"errors.email",tag:"p"},{email:u(()=>[a("strong",null,i(n.email),1)]),_:1})):E("",!0),a("label",Qe,i(n.$t("labels.name")),1),k(a("input",{class:T({invalid:n.v$.name.$error}),id:"name",type:"text","onUpdate:modelValue":e[1]||(e[1]=m=>n.name=m),placeholder:"name"},null,2),[[S,n.name,void 0,{trim:!0}]]),n.v$.name.$error?(c(),$(s,{key:1,keypath:"errors.name",tag:"p"},{name:u(()=>[a("strong",null,i(n.name),1)]),_:1})):E("",!0),a("label",We,i(n.$t("labels.message")),1),k(a("input",{class:T({invalid:n.v$.message.$error}),id:"message",type:"text","onUpdate:modelValue":e[2]||(e[2]=m=>n.message=m),placeholder:"message"},null,2),[[S,n.message,void 0,{trim:!0}]]),n.v$.message.$error?(c(),$(s,{key:2,keypath:"errors.message",tag:"p"},{message:u(()=>[a("strong",null,i(n.message),1)]),_:1})):E("",!0),d(p,{disabled:"",onClick:n.handleSubmit},{default:u(()=>[h(i(n.$t("submitButton")),1)]),_:1},8,["onClick"])],32)])])}typeof W=="function"&&W(G);var Je=v(G,[["render",Ge],["__scopeId","data-v-42c832d3"]]),y;(function(n){n.EN="en",n.PT="pt"})(y||(y={}));y.EN,y.PT;const Xe=y.EN,Ye=()=>{const n=navigator.language;return n.includes("-")?n.split("-")[0]:n},J=me({locale:Ye(),fallbackLocale:Xe,globalInjection:!0,availableLocales:["pt","en"],fallbackWarn:!1,messages:{pt:{titles:{home:"In\xEDcio",extractor:"Extrator",contact:"Contato",about:"Quem Somos",404:"404"}},en:{titles:{home:"Home",extractor:"Extractor",contact:"Contact",about:"About",404:"404"}}}}),Ze=[{path:"/",name:"Home",component:Ve,meta:{title:"home"}},{path:"/extractor",name:"Extractor",component:Ke,meta:{title:"extractor"}},{path:"/contact",name:"Contact",component:Je,meta:{title:"contact"}},{path:"/about",name:"About",component:Ue,meta:{title:"about"}},{path:"/404",name:"NotFound",component:Me,meta:{title:"404"}},{path:"/:pathMatch(.*)*",redirect:"/404"}],X=de({history:pe(),routes:Ze});X.afterEach((n,e)=>{_e(()=>{let t=J.global.t("titles."+n.meta.title)+" | ";n.meta.title||(t=" "),document.title=t+"MackPrevIA "}).then(()=>{})});const et={transition:"Vue-Toastification__bounce",maxToasts:5,newestOnTop:!0,filterBeforeCreate:(n,e)=>e.filter(t=>t.type===n.type).length!==0?!1:n,position:fe.BOTTOM_CENTER,timeout:5e3,closeOnClick:!0,pauseOnFocusLoss:!0,pauseOnHover:!0,draggable:!0,draggablePercent:.6,showCloseButtonOnHover:!1,closeButton:"button",icon:!0,rtl:!1},z=he(Ce);z.use(Se,Ne);z.use(ge,et);z.use(J);z.use(X);z.component("translation",C);z.component("the-button",b);z.mount("#app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
